using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Woopec.Graphics.Helpers;
using Woopec.Graphics.InternalCommunication;
using Woopec.Graphics.LowLevelScreen;

namespace Woopec.Graphics.UnitTests
{

    /// <summary>
    /// Tests for the Pen class
    /// </summary>
    [TestClass]
    public class PenTest
    {
        private class ScreenMockup : ILowLevelScreen
        {
            private int _lineCounter;
            private int _figureCounter;

            public List<ScreenLine> DrawnLines = new();
            public List<ScreenFigure> FigureUpdates = new();

            public int LastIssuedAnimatonGroupID { get; set; }


            public int CreateLine()
            {
                _lineCounter++;
                return _lineCounter;
            }

            public void DrawLine(ScreenLine line)
            {
                DrawnLines.Add(line);
            }

            public void RegisterShape(string name, ShapeBase shape)
            {
                throw new NotImplementedException();
            }
            public void AddShape(string name, ShapeBase shape)
            {
                throw new NotImplementedException();
            }
            public ShapeBase GetShape(string shapeName)
            {
                throw new NotImplementedException();
            }

            public List<string> GetShapes()
            {
                throw new NotImplementedException();
            }


            public int CreateFigure()
            {
                _figureCounter++;
                return _figureCounter;
            }

            public void UpdateFigure(ScreenFigure figure)
            {
                FigureUpdates.Add(figure);
            }

            public Task<string> TextInputAsync(string title, string prompt, Vec2D position)
            {
                throw new NotImplementedException();
            }

            public Task<double?> NumberInputAsync(ScreenNumberDialog dialog)
            {
                throw new NotImplementedException();
            }

            public void ShowTextBlock(ScreenTextBlock textBlock)
            {
                throw new NotImplementedException();
            }

            public Task<Vec2D> ShowTextBlockWithReturnCoordinateAsync(ScreenTextBlock textBlock)
            {
                throw new NotImplementedException();
            }
        }

        [TestMethod]
        public void Pen_InitialValues()
        {
            // Arrange

            // Act
            var pen = CreateSut();

            // Assert
            var expected = new Vec2D(0, 0);
            pen.Position.Should().Be(expected);
            pen.Heading.Should().Be(0);
        }


        [TestMethod]
        public void Pen_Move_Works()
        {
            // Arrange
            var pen = CreateSut();

            // Act
            pen.Move(25);

            // Assert
            var expected = new Vec2D(25, 0);
            pen.Position.Should().Be(expected);

            // Act
            pen.Move(25);

            // Assert
            var expected2 = new Vec2D(50, 0);
            pen.Position.Should().Be(expected2);
        }


        [TestMethod]
        public void Rotate_Works()
        {
            // Arrange
            var pen = CreateSut();

            // Act
            pen.Rotate(90);

            // Assert
            pen.Heading.Should().Be(90);

            pen.Move(100);
            var expextedPostion = new Vec2D(0, 100);
            pen.Position.IsApproximatelyEqualTo(expextedPostion, 0.001).Should().BeTrue();
        }

        [TestMethod]
        public void Heading_Set_WorksAsRotate()
        {
            // Arrange
            var pen = CreateSut();

            // Act
            pen.Heading = 90;

            // Assert
            pen.Heading.Should().Be(90);

            pen.Move(100);
            var expextedPostion = new Vec2D(0, 100);
            pen.Position.IsApproximatelyEqualTo(expextedPostion, 0.001).Should().BeTrue();
        }
        [TestMethod]
        public void Pen_LeftWithMoreThan360Degrees_Works()
        {
            // Arrange
            var pen = CreateSut();

            // Act
            pen.Rotate(450);

            // Assert
            pen.Heading.Should().Be(90);
        }

        /// <summary>
        /// When a pen is created, it is invisible for the time being.
        /// The user should be able to decide when and where to see it first.
        /// </summary>
        [TestMethod]
        public void Pen_InitiallyPenIsUp()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Assert
            pen.IsDown.Should().BeFalse();

            // Act
            pen.Move(100);

            // Assert
            screenMockup.DrawnLines.Count.Should().Be(0);
        }

        [TestMethod]
        public void Pen_WhenPenIsUpNoLineIsDrawn()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = false;
            pen.Move(100);

            // Assert
            screenMockup.DrawnLines.Count.Should().Be(0);
        }

        [TestMethod]
        public void Pen_MoveAfterPenDownIsDrawn()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = false;
            pen.Move(100);
            pen.Rotate(90);
            pen.IsDown = true;
            pen.Move(50);

            // Assert
            screenMockup.DrawnLines.Count.Should().Be(1);
            var line = screenMockup.DrawnLines[0];
            line.Point1.IsApproximatelyEqualTo(new Vec2D(100, 0), 0).Should().BeTrue();
            line.Point2.IsApproximatelyEqualTo(new Vec2D(100, 50), 0).Should().BeTrue();
        }

        [TestMethod]
        public void SetPosition_WhenPenIsDown_DrawsALine()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = true;
            pen.SetPosition(new Vec2D(0, 100));

            // Assert
            screenMockup.DrawnLines.Count.Should().Be(1);
        }

        /// <summary>
        /// It is easier to understand if the user cannot only get pen.Position, but also set pen.Position.
        /// </summary>
        [TestMethod]
        public void SetPosition_ViaProperty_WorksAsSetPositionMethod()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = true;
            pen.Position = new Vec2D(0, 100);

            // Assert
            screenMockup.DrawnLines.Count.Should().Be(1);
        }

        [TestMethod]
        public void SetPosition_WithXAndY_Works()
        {
            var screenMockup = new ScreenMockup();
            var pen = CreateSut(screenMockup);

            pen.SetPosition(0, 100);

            pen.Position.Should().Be(new Vec2D(0, 100));
        }


        [TestMethod]
        public void Pen_Filling()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = true;
            pen.Move(90);   // filling shape starts at 90, 0
            pen.BeginFill();
            pen.Filling.Should().BeTrue();
            pen.SetPosition((90, 90));      // second point is 90, 90
            foreach (var _ in Enumerable.Range(0, 3))
            {
                pen.Move(90);
                pen.Rotate(-90);
            }
            pen.EndFill(Colors.Green);
            ScreenLine lastLine = screenMockup.DrawnLines.Last();

            // Assert
            pen.Filling.Should().BeFalse();
            ScreenFigure lastFigure = screenMockup.FigureUpdates.Last();
            lastFigure.Shape.Should().NotBeNull();
            lastFigure.Shape.Type.Should().Be(ShapeType.Polygon);
            var shape = lastFigure.Shape as Shape;
            var polygon = shape.Components[0].Polygon;
            polygon.Count.Should().Be(5);

            // The GroupId of the figure has to be different from the GroupId of the line. 
            // Otherwise the figure would not be drawn in some cases (because it belongs to the same group as the line)
            lastLine.GroupID.Should().NotBe(lastFigure.GroupID);
        }

        [TestMethod]
        public void Pen_PolyCreation()
        {
            var screenMockup = new ScreenMockup();

            // Arrange
            var pen = CreateSut(screenMockup);

            // Act
            pen.IsDown = true;
            pen.Move(90);   // filling shape starts at 90, 0
            pen.BeginPoly();
            pen.SetPosition((90, 90));      // second point is 90, 90
            foreach (var _ in Enumerable.Range(0, 2))
            {
                pen.Move(90);
                pen.Rotate(-90);
            }
            var polygon = pen.EndPoly();

            // Assert
            polygon.Count.Should().Be(4);
            polygon[0].Should().Be(new Vec2D(90, 0));
            polygon[1].Should().Be(new Vec2D(90, 90));
            polygon[2].Should().Be(new Vec2D(180, 90));
            polygon[3].Should().Be(new Vec2D(180, 0));
        }




        private static Pen CreateSut()
        {
            return new Pen(new ScreenMockup());
        }

        private static Pen CreateSut(ILowLevelScreen screen)
        {
            return new Pen(screen);
        }
    }
}
